/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__register_bank:inst11|state")
{
	VALUES = "Undefined", "state.s0_wait", "state.s1_wait_asterisk1", "state.s2_get_fil", "state.s2_store_fil", "state.s2_update_fil", "state.s3_wait_asterisk2", "state.s4_get_col", "state.s4_update_col", "state.s5_wait_asterisk3", "state.s6_store_keycode";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode_in[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_in";
}

SIGNAL("keycode_in[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_in";
}

SIGNAL("keycode_in[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_in";
}

SIGNAL("keycode_in[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode_in";
}

SIGNAL("fixcol")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("fixcol[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("fixcol[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "fixcol";
}

SIGNAL("new_code")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("done")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ast_check")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("key_Read")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("register_bank:inst11|state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__register_bank:inst11|state";
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 980.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("key")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 340.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("keycode_in[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 170.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("keycode_in[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 190.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 170.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("keycode_in[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 340.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 170.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("keycode_in[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 310.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 230.0;
	}
}

TRANSITION_LIST("fixcol[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("fixcol[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("fixcol[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 96.738;
		LEVEL 1 FOR 540.0;
		LEVEL 0 FOR 363.262;
	}
}

TRANSITION_LIST("fixcol[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("fixcol[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("fixcol[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("fixcol[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 196.75;
		LEVEL 1 FOR 440.0;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 63.25;
	}
}

TRANSITION_LIST("fixcol[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 196.597;
		LEVEL 1 FOR 440.0;
		LEVEL 0 FOR 363.403;
	}
}

TRANSITION_LIST("new_code")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("done")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 296.429;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 683.571;
	}
}

TRANSITION_LIST("ast_check")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 38.142;
		LEVEL 1 FOR 39.61;
		LEVEL 0 FOR 60.39;
		LEVEL 1 FOR 39.61;
		LEVEL 0 FOR 80.415;
		LEVEL 1 FOR 59.404;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 160.571;
		LEVEL 1 FOR 59.429;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 0.181;
		LEVEL 0 FOR 60.39;
		LEVEL 1 FOR 21.858;
	}
}

TRANSITION_LIST("key_Read")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 77.519;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.26;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 99.641;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 340.099;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 100.26;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 62.221;
	}
}

TRANSITION_LIST("register_bank:inst11|state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL state.s0_wait FOR 52.939;
		LEVEL state.s1_wait_asterisk1 FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_get_fil FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_store_fil FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_update_fil FOR 39.999;
		LEVEL state.s3_wait_asterisk2 FOR 20.0;
		LEVEL state.s4_get_col FOR 20.0;
		LEVEL state.s4_update_col FOR 80.0;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s5_wait_asterisk3 FOR 20.0;
		LEVEL state.s6_store_keycode FOR 20.0;
		LEVEL state.s0_wait FOR 320.0;
		LEVEL state.s1_wait_asterisk1 FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_get_fil FOR 119.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_store_fil FOR 19.999;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s2_update_fil FOR 59.999;
		LEVEL state.s3_wait_asterisk2 FOR 20.0;
		LEVEL state.s4_get_col FOR 60.0;
		LEVEL state.s4_update_col FOR 60.0;
		LEVEL Undefined FOR 0.001;
		LEVEL state.s5_wait_asterisk3 FOR 7.061;
	}
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_in[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_in[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_in[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode_in[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
	CHILDREN = 9, 10, 11, 12, 13, 14, 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "fixcol[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "new_code";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "done";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ast_check";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key_Read";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "register_bank:inst11|state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
